"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import {
  Send,
  X,
  User,
  Loader2,
  Code,
  RotateCcw,
  ChevronDown,
  Pause,
  HistoryIcon,
  Check,
  AlertTriangle,
  Undo2,
  Search,
  Zap,
  Brain,
  Settings,
  Sparkles,
  Activity,
  BookOpen,
  PenTool,
  Command,
  Calendar,
  Book,
  Users,
  Filter,
  Sliders,
  Target,
  BarChart3,
  Navigation,
  Cog,
  CheckCircle,
  Circle,
  Info,
  Lightbulb,
} from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { useRouter } from "next/navigation"
import TextareaAutosize from 'react-textarea-autosize'
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"

// –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
interface Tool {
  name: string
  description: string
  parameters: any
  apiMethod?: "GET" | "POST" | "PUT" | "DELETE"
  apiEndpoint?: string
}

interface ToolCategory {
  id: string
  name: string
  description: string
  icon: string
  keywords: string[]
  priority: number
  tools: string[]
}

interface ToolSelectionConfig {
  maxToolsPerRequest: number
  alwaysIncludeCategories: string[]
  contextualSelection: boolean
  userPreferences?: {
    preferredCategories: string[]
    excludedCategories: string[]
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const TOOL_CATEGORIES: ToolCategory[] = [
  {
    id: "users",
    name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
    icon: "üë§",
    keywords: [
      "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "—é–∑–µ—Ä", "–∫–ª–∏–µ–Ω—Ç", "—á–∏—Ç–∞—Ç–µ–ª—å", "—Å—Ç—É–¥–µ–Ω—Ç", "—á–µ–ª–æ–≤–µ–∫", "–ª—é–¥–∏",
      "—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å",
      "–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      "–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "–ø—Ä–æ—Ñ–∏–ª—å", "–∞–∫–∫–∞—É–Ω—Ç", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    ],
    priority: 2,
    tools: [
      "getAllUsers",
      "getUserById", 
      "createUser",
      "updateUser",
      "deleteUser",
      "getUserReservations"
    ]
  },
  {
    id: "books",
    name: "–ö–Ω–∏–≥–∏",
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–Ω–∏–≥",
    icon: "üìö",
    keywords: [
      "–∫–Ω–∏–≥–∞", "–∫–Ω–∏–≥–∏", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∏–∑–¥–∞–Ω–∏–µ", "—Ç–æ–º", "—ç–∫–∑–µ–º–ø–ª—è—Ä", "–∫–∞—Ç–∞–ª–æ–≥",
      "–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "—Å–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É", "–Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞", "–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É",
      "–Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É", "–ø–æ–∏—Å–∫ –∫–Ω–∏–≥", "–ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏", "—Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥",
      "–æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É", "–∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", "—É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É",
      "–∞–≤—Ç–æ—Ä", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–∂–∞–Ω—Ä", "ISBN", "–∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è",
      "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "—ç–∫–∑–µ–º–ø–ª—è—Ä—ã", "–∫–æ–ø–∏–∏"
    ],
    priority: 2,
    tools: [
      "getAllBooks",
      "getBookById",
      "createBook", 
      "updateBook",
      "deleteBook",
      "getBestAvailableBookInstance",
      "getAllBookInstances",
      "getBookInstanceById",
      "createBookInstance",
      "updateBookInstance", 
      "deleteBookInstance"
    ]
  },
  {
    id: "reservations",
    name: "–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è",
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã–¥–∞—á–µ–π –∫–Ω–∏–≥",
    icon: "üìÖ",
    keywords: [
      "—Ä–µ–∑–µ—Ä–≤", "–±—Ä–æ–Ω—å", "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∑–∞–∫–∞–∑", "–∑–∞–ø—Ä–æ—Å",
      "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥—É", "–≤–∑—è—Ç—å –∫–Ω–∏–≥—É",
      "–≤—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É", "–≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", "–ø—Ä–æ–¥–ª–∏—Ç—å", "–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
      "–æ–¥–æ–±—Ä–∏—Ç—å", "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å", "—Å—Ç–∞—Ç—É—Å", "—Å—Ä–æ–∫",
      "–ø—Ä–æ—Å—Ä–æ—á–∫–∞", "—à—Ç—Ä–∞—Ñ", "–∏—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á", "–∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏"
    ],
    priority: 1,
    tools: [
      "getAllReservations",
      "getReservationById",
      "createReservation",
      "updateReservation", 
      "deleteReservation"
    ]
  },
  {
    id: "roles",
    name: "–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞",
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    icon: "üë•",
    keywords: [
      "—Ä–æ–ª—å", "–ø—Ä–∞–≤–∞", "–¥–æ—Å—Ç—É–ø", "—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å",
      "–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", "–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", "–ø–æ–ª–Ω–æ–º–æ—á–∏—è",
      "–≥—Ä—É–ø–ø–∞", "—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞"
    ],
    priority: 3,
    tools: [
      "getAllRoles",
      "getRoleById", 
      "assignRoleToUser"
    ]
  },
  {
    id: "reports",
    name: "–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    description: "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤",
    icon: "üìä",
    keywords: [
      "–æ—Ç—á–µ—Ç", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–¥–∞–Ω–Ω—ã–µ",
      "–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", "—Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", "–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
      "–∞–Ω–∞–ª–∏–∑", "–º–µ—Ç—Ä–∏–∫–∏", "KPI", "–¥–∞—à–±–æ—Ä–¥", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
      "—Ç—Ä–µ–Ω–¥—ã", "–¥–∏–Ω–∞–º–∏–∫–∞", "—Å–≤–æ–¥–∫–∞", "—Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"
    ],
    priority: 4,
    tools: [
      "generateReportWithCharts"
    ]
  },
  {
    id: "navigation",
    name: "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
    description: "–ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏",
    icon: "üß≠",
    keywords: [
      "–ø–µ—Ä–µ–π—Ç–∏", "–æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", "–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è",
      "—Å—Ç—Ä–∞–Ω–∏—Ü–∞", "—Ä–∞–∑–¥–µ–ª", "–º–µ–Ω—é", "–ø–µ—Ä–µ—Ö–æ–¥", "—Å—Å—ã–ª–∫–∞", "URL",
      "–≥–ª–∞–≤–Ω–∞—è", "–∫–∞—Ç–∞–ª–æ–≥", "–ø—Ä–æ—Ñ–∏–ª—å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–∞–¥–º–∏–Ω–∫–∞"
    ],
    priority: 5,
    tools: [
      "navigateToPage"
    ]
  },
  {
    id: "system",
    name: "–°–∏—Å—Ç–µ–º–Ω—ã–µ",
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
    icon: "‚öôÔ∏è",
    keywords: [
      "—Å—Ç–æ–ø", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–ø—Ä–µ—Ä–≤–∞—Ç—å", "–æ—Ç–º–µ–Ω–∞",
      "–∞–≥–µ–Ω—Ç", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "—Å–∏—Å—Ç–µ–º–∞", "—Å–±—Ä–æ—Å", "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    ],
    priority: 1,
    tools: [
      "stopAgent",
      "cancelCurrentAction"
    ]
  }
]

const DEFAULT_TOOL_SELECTION_CONFIG: ToolSelectionConfig = {
  maxToolsPerRequest: 15,
  alwaysIncludeCategories: ["system"],
  contextualSelection: true,
  userPreferences: {
    preferredCategories: [],
    excludedCategories: []
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function analyzeUserQuery(query: string): {
  detectedCategories: string[]
  confidence: Record<string, number>
  suggestedCategories: string[]
} {
  const normalizedQuery = query.toLowerCase().trim()
  const confidence: Record<string, number> = {}
  const detectedCategories: string[] = []
  
  TOOL_CATEGORIES.forEach(category => {
    let score = 0
    let matchCount = 0
    
    category.keywords.forEach(keyword => {
      if (normalizedQuery.includes(keyword.toLowerCase())) {
        const weight = keyword.split(' ').length
        score += weight
        matchCount++
      }
    })
    
    if (matchCount > 0) {
      confidence[category.id] = Math.min(score / category.keywords.length, 1.0)
      
      if (confidence[category.id] > 0.1) {
        detectedCategories.push(category.id)
      }
    }
  })
  
  detectedCategories.sort((a, b) => (confidence[b] || 0) - (confidence[a] || 0))
  
  const suggestedCategories = getSuggestedCategories(detectedCategories, normalizedQuery)
  
  return {
    detectedCategories,
    confidence,
    suggestedCategories
  }
}

function getSuggestedCategories(detectedCategories: string[], query: string): string[] {
  const suggestions: string[] = []
  
  if (detectedCategories.includes("reservations")) {
    if (!detectedCategories.includes("users")) suggestions.push("users")
    if (!detectedCategories.includes("books")) suggestions.push("books")
  }
  
  if (detectedCategories.includes("users") && 
      (query.includes("—Ä–æ–ª—å") || query.includes("–ø—Ä–∞–≤–∞") || query.includes("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"))) {
    if (!detectedCategories.includes("roles")) suggestions.push("roles")
  }
  
  const questionWords = ["—Å–∫–æ–ª—å–∫–æ", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–∏–µ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
  if (questionWords.some(word => query.includes(word)) && 
      !detectedCategories.includes("reports")) {
    suggestions.push("reports")
  }
  
  return suggestions
}

function filterToolsByCategories(
  allTools: Tool[],
  selectedCategories: string[],
  config: ToolSelectionConfig = DEFAULT_TOOL_SELECTION_CONFIG
): Tool[] {
  const categoriesToInclude = new Set([
    ...selectedCategories,
    ...config.alwaysIncludeCategories
  ])
  
  if (config.userPreferences?.excludedCategories) {
    config.userPreferences.excludedCategories.forEach(cat => 
      categoriesToInclude.delete(cat)
    )
  }
  
  const toolNamesToInclude = new Set<string>()
  
  TOOL_CATEGORIES.forEach(category => {
    if (categoriesToInclude.has(category.id)) {
      category.tools.forEach(toolName => toolNamesToInclude.add(toolName))
    }
  })
  
  const filteredTools = allTools.filter(tool => 
    toolNamesToInclude.has(tool.name)
  )
  
  if (filteredTools.length > config.maxToolsPerRequest) {
    const priorityMap = new Map<string, number>()
    TOOL_CATEGORIES.forEach(cat => {
      cat.tools.forEach(toolName => {
        if (!priorityMap.has(toolName) || priorityMap.get(toolName)! > cat.priority) {
          priorityMap.set(toolName, cat.priority)
        }
      })
    })
    
    return filteredTools
      .sort((a, b) => (priorityMap.get(a.name) || 999) - (priorityMap.get(b.name) || 999))
      .slice(0, config.maxToolsPerRequest)
  }
  
  return filteredTools
}

function selectToolsForQuery(
  query: string,
  allTools: Tool[],
  config: ToolSelectionConfig = DEFAULT_TOOL_SELECTION_CONFIG
): {
  selectedTools: Tool[]
  analysis: ReturnType<typeof analyzeUserQuery>
  usedCategories: string[]
} {
  const analysis = analyzeUserQuery(query)
  
  let categoriesToUse = [...analysis.detectedCategories]
  
  if (categoriesToUse.length === 0) {
    categoriesToUse = ["users", "books", "reservations"]
  }
  
  analysis.suggestedCategories.forEach(cat => {
    if (!categoriesToUse.includes(cat)) {
      categoriesToUse.push(cat)
    }
  })
  
  if (config.userPreferences?.preferredCategories) {
    config.userPreferences.preferredCategories.forEach(cat => {
      if (!categoriesToUse.includes(cat)) {
        categoriesToUse.push(cat)
      }
    })
  }
  
  const selectedTools = filterToolsByCategories(allTools, categoriesToUse, config)
  
  return {
    selectedTools,
    analysis,
    usedCategories: categoriesToUse
  }
}

function getToolUsageStats(selectedTools: Tool[], allTools: Tool[]): {
  totalTools: number
  selectedCount: number
  reductionPercentage: number
  categoriesUsed: string[]
} {
  const selectedNames = new Set(selectedTools.map(t => t.name))
  const categoriesUsed = TOOL_CATEGORIES
    .filter(cat => cat.tools.some(toolName => selectedNames.has(toolName)))
    .map(cat => cat.id)
  
  return {
    totalTools: allTools.length,
    selectedCount: selectedTools.length,
    reductionPercentage: Math.round((1 - selectedTools.length / allTools.length) * 100),
    categoriesUsed
  }
}

function createSelectionSummary(
  analysis: ReturnType<typeof analyzeUserQuery>,
  usedCategories: string[],
  stats: ReturnType<typeof getToolUsageStats>
): string {
  const categoryNames = usedCategories
    .map(id => TOOL_CATEGORIES.find(cat => cat.id === id)?.name)
    .filter(Boolean)
    .join(", ")
  
  const detectedText = analysis.detectedCategories.length > 0
    ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã: ${analysis.detectedCategories.map(id => 
        TOOL_CATEGORIES.find(cat => cat.id === id)?.name
      ).join(", ")}`
    : "–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä"
  
  return `${detectedText}. ${stats.selectedCount}/${stats.totalTools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (-${stats.reductionPercentage}%). –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryNames}.`
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã
interface Message {
  id: string
  content: string
  role: "user" | "assistant"
  timestamp: Date
  apiCall?: {
    method: string
    endpoint: string
    params?: any
    message?: string
  }
}

type OpenRouterHistoryMessage =
  | { role: "system"; content: string }
  | { role: "user"; content: string }
  | { role: "assistant"; content: string }
  | { role: "function"; name: string; content: string }

const generateUniqueId = () => `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const ToolSelectionDialog: React.FC<{
  isOpen: boolean
  onClose: () => void
  allTools: Tool[]
  mode: 'auto' | 'manual'
  setMode: (mode: 'auto' | 'manual') => void
  manualCategories: string[]
  setManualCategories: (categories: string[]) => void
  lastQueryAnalysis: ReturnType<typeof analyzeUserQuery>
}> = ({ 
  isOpen, 
  onClose, 
  allTools, 
  mode, 
  setMode, 
  manualCategories, 
  setManualCategories, 
  lastQueryAnalysis 
}) => {
  const toggleCategory = (categoryId: string) => {
    setManualCategories(prev => 
      prev.includes(categoryId) 
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    )
  }

  const stats = getToolUsageStats(
    filterToolsByCategories(allTools, manualCategories),
    allTools
  )

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden">
        <DialogHeader className="pb-4 border-b">
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Filter className="w-6 h-6 text-blue-500" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <Settings className="w-5 h-5" />
              –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            </h3>
            
            <div className="grid grid-cols-2 gap-4">
              <Card className={`cursor-pointer transition-all ${mode === 'auto' ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'}`}
                    onClick={() => setMode('auto')}>
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <div className={`w-4 h-4 rounded-full border-2 ${mode === 'auto' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'}`} />
                    <div>
                      <h4 className="font-medium flex items-center gap-2">
                        <Target className="w-4 h-4" />
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
                      </h4>
                      <p className="text-sm text-gray-600">–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className={`cursor-pointer transition-all ${mode === 'manual' ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'}`}
                    onClick={() => setMode('manual')}>
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <div className={`w-4 h-4 rounded-full border-2 ${mode === 'manual' ? 'bg-blue-500 border-blue-500' : 'border-gray-300'}`} />
                    <div>
                      <h4 className="font-medium flex items-center gap-2">
                        <Sliders className="w-4 h-4" />
                        –†—É—á–Ω–æ–π
                      </h4>
                      <p className="text-sm text-gray-600">–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ */}
          {mode === 'auto' && lastQueryAnalysis.detectedCategories.length > 0 && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-medium text-blue-800 mb-2 flex items-center gap-2">
                <Lightbulb className="w-4 h-4" />
                –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
              </h4>
              <div className="space-y-2">
                <div className="flex flex-wrap gap-2">
                  {lastQueryAnalysis.detectedCategories.map(catId => {
                    const category = TOOL_CATEGORIES.find(c => c.id === catId)
                    const confidence = Math.round((lastQueryAnalysis.confidence[catId] || 0) * 100)
                    return (
                      <Badge key={catId} variant="secondary" className="bg-blue-100 text-blue-800">
                        {category?.icon} {category?.name} ({confidence}%)
                      </Badge>
                    )
                  })}
                </div>
                {lastQueryAnalysis.suggestedCategories.length > 0 && (
                  <div>
                    <span className="text-sm text-blue-700">–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ: </span>
                    {lastQueryAnalysis.suggestedCategories.map(catId => {
                      const category = TOOL_CATEGORIES.find(c => c.id === catId)
                      return (
                        <Badge key={catId} variant="outline" className="ml-1 border-blue-300 text-blue-700">
                          {category?.icon} {category?.name}
                        </Badge>
                      )
                    })}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
          {mode === 'manual' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <CheckCircle className="w-5 h-5" />
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
              </h3>
              
              <div className="grid grid-cols-2 gap-3">
                {TOOL_CATEGORIES.map(category => {
                  const isSelected = manualCategories.includes(category.id)
                  const toolCount = category.tools.length
                  
                  return (
                    <Card 
                      key={category.id}
                      className={`cursor-pointer transition-all ${
                        isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'
                      }`}
                      onClick={() => toggleCategory(category.id)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start gap-3">
                          <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                            isSelected ? 'bg-blue-500 border-blue-500' : 'border-gray-300'
                          }`}>
                            {isSelected && <Check className="w-3 h-3 text-white" />}
                          </div>
                          <div className="flex-1">
                            <h4 className="font-medium flex items-center gap-2">
                              <span className="text-lg">{category.icon}</span>
                              {category.name}
                            </h4>
                            <p className="text-sm text-gray-600 mb-2">{category.description}</p>
                            <Badge variant="outline" className="text-xs">
                              {toolCount} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                            </Badge>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )
                })}
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ */}
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-2 flex items-center gap-2">
                  <BarChart3 className="w-4 h-4" />
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞
                </h4>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">–í—ã–±—Ä–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</span>
                    <div className="font-semibold text-lg">{stats.selectedCount}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ:</span>
                    <div className="font-semibold text-lg">{stats.totalTools}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">–≠–∫–æ–Ω–æ–º–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:</span>
                    <div className="font-semibold text-lg text-green-600">{stats.reductionPercentage}%</div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex justify-between items-center pt-4 border-t">
            <Button variant="outline" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <div className="flex gap-2">
              {mode === 'manual' && (
                <Button 
                  variant="outline" 
                  onClick={() => setManualCategories(TOOL_CATEGORIES.map(c => c.id))}
                >
                  –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                </Button>
              )}
              <Button onClick={onClose}>
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (ToolCallDisplay, UndoManager, CommandButton) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ... (–∫–æ–¥ —ç—Ç–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
export default function EnhancedAIAssistantChat() {
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [isOpen, setIsOpen] = useState(false)
  const [isAnimating, setIsAnimating] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState("")
  const conversationIdRef = useRef<string>(generateUniqueId())
  const [isLoading, setIsLoading] = useState(false)
  const [statusMessage, setStatusMessage] = useState<string | null>(null)
  const [aiMode, setAiMode] = useState<"question" | "action">("action")
  const [selectedModel, setSelectedModel] = useState("gemini-2.5-flash")
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const prevMessagesLength = useRef(messages.length)
  const [streamedResponse, setStreamedResponse] = useState("")
  const abortControllerRef = useRef<AbortController | null>(null)
  const router = useRouter()
  const [isHistoryOpen, setIsHistoryOpen] = useState(false)
  const [historyData, setHistoryData] = useState<any[]>([])
  const snapshotRef = useRef<Message[]>([])
  const [lastOperation, setLastOperation] = useState<any>(null)
  const [connectionStatus, setConnectionStatus] = useState<"connected" | "connecting" | "disconnected">("connected")
  const [showQuickCommands, setShowQuickCommands] = useState(false)
  const [activeCommandCategory, setActiveCommandCategory] = useState<string | null>(null)
  const [historyFilter, setHistoryFilter] = useState<"all" | "changes" | "reads">("all")

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
  const [allTools, setAllTools] = useState<Tool[]>([])
  const [toolSelectionMode, setToolSelectionMode] = useState<'auto' | 'manual'>('auto')
  const [manualSelectedCategories, setManualSelectedCategories] = useState<string[]>(['users', 'books', 'reservations'])
  const [isToolSelectionOpen, setIsToolSelectionOpen] = useState(false)
  const [toolSelectionSummary, setToolSelectionSummary] = useState<string | null>(null)
  const [lastQueryAnalysis, setLastQueryAnalysis] = useState<ReturnType<typeof analyzeUserQuery>>({
    detectedCategories: [],
    confidence: {},
    suggestedCategories: []
  })

  const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GOOGLE_API_KEY
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const loadTools = async () => {
      try {
        setStatusMessage("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã...")
        setConnectionStatus("connecting")

        const response = await fetch("/wiseOwl.json")
        if (response.ok) {
          const data = await response.json()
          const enhancedTools = data.map((tool: any) => {
            const match = tool.description.match(/–ò—Å–ø–æ–ª—å–∑—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç (GET|POST|PUT|DELETE) (\S+)/)
            if (match) {
              return { ...tool, apiMethod: match[1], apiEndpoint: match[2] }
            }
            return tool
          })

          setAllTools(enhancedTools)
          setConnectionStatus("connected")

          if (enhancedTools.length === 0) {
            setStatusMessage("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            setConnectionStatus("disconnected")
          } else {
            setStatusMessage(null)
          }
        } else {
          setStatusMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`)
          setConnectionStatus("disconnected")
        }
      } catch (error) {
        setStatusMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AI —Å–∏—Å—Ç–µ–º–µ")
        setConnectionStatus("disconnected")
      }
    }

    if (isOpen && allTools.length === 0) {
      loadTools()
    }
  }, [isOpen, allTools.length])

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è runConversation —Å –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const runConversation = async (conversationHistory: Message[], onStreamChunk?: (chunk: string) => void) => {
    const isStreaming = selectedModel === "gemini-2.0-flash-streaming"
    const modelForApi = selectedModel === "gemini-2.0-flash-streaming" ? "gemini-2.0-flash" : selectedModel
    const geminiEndpoint = `https://generativelanguage.googleapis.com/v1beta/models/${modelForApi}:generateContent?key=${GEMINI_API_KEY}`

    // –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
    let availableTools: Tool[]
    let selectionSummary: string

    if (toolSelectionMode === 'auto') {
      const { selectedTools: autoSelectedTools, analysis, usedCategories } = selectToolsForQuery(
        inputValue, 
        allTools, 
        DEFAULT_TOOL_SELECTION_CONFIG
      )
      availableTools = autoSelectedTools
      const stats = getToolUsageStats(availableTools, allTools)
      selectionSummary = createSelectionSummary(analysis, usedCategories, stats)
      setLastQueryAnalysis(analysis)
    } else {
      availableTools = filterToolsByCategories(allTools, manualSelectedCategories, DEFAULT_TOOL_SELECTION_CONFIG)
      const stats = getToolUsageStats(availableTools, allTools)
      const categoryNames = manualSelectedCategories
        .map(id => TOOL_CATEGORIES.find(cat => cat.id === id)?.name)
        .filter(Boolean)
        .join(", ")
      selectionSummary = `–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä. ${stats.selectedCount}/${stats.totalTools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (-${stats.reductionPercentage}%). –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryNames}.`
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–∂–∏–º—É AI (–≤–æ–ø—Ä–æ—Å/–¥–µ–π—Å—Ç–≤–∏–µ)
    if (aiMode === "question") {
      availableTools = availableTools.filter((tool) => tool.apiMethod === "GET" || !tool.apiMethod)
    }

    setToolSelectionSummary(selectionSummary)

    const toolDeclarations = availableTools.map(({ apiMethod, apiEndpoint, ...rest }) => rest)
    const currentHistory = buildGeminiHistory(conversationHistory)
    let maxIterations = 10
    let lastToolCalledInLoop: string | null = null
    const lastUserMessage = conversationHistory.filter((m) => m.role === "user").pop()?.content || ""

    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ runConversation –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏)
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  // ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ */}
      {!isOpen && (
        <div className="relative">
          <Button
            onClick={handleToggleChat}
            className="rounded-full w-16 h-16 bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 hover:from-blue-600 hover:via-purple-600 hover:to-indigo-700 shadow-2xl border-0 transition-all duration-300 hover:scale-110 group overflow-hidden"
          >
            <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            <div className="relative z-10 transform group-hover:scale-110 transition-transform duration-300">
              <img
                src="/images/owl-svgrepo-com.svg"
                className="w-8 h-8"
                alt="AI Assistant"
              />
            </div>
            <div className="absolute inset-0 rounded-full bg-blue-400 animate-ping opacity-20" />
          </Button>
          <div className="absolute -top-1 -right-1 w-4 h-4 rounded-full bg-green-400 border-2 border-white shadow-sm">
            <div className="w-full h-full rounded-full bg-green-400 animate-pulse" />
          </div>
        </div>
      )}

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      {isOpen && (
        <div
          className={`transform transition-all duration-500 ease-out ${
            isAnimating ? "scale-95 opacity-0 translate-y-4" : "scale-100 opacity-100 translate-y-0"
          }`}
        >
          <Card className="w-[520px] h-[650px] shadow-2xl bg-white/95 backdrop-blur-xl border-0 overflow-hidden">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <CardHeader className="pb-3 bg-gradient-to-r from-blue-50 to-purple-50 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <img src="/images/owl-svgrepo-com.svg" alt="–ú—É–¥—Ä–∞—è –°–æ–≤–∞" className="w-6 h-6" />
                    <div className="absolute -bottom-1 -right-1 w-3 h-3 rounded-full bg-green-400 border border-white" />
                  </div>
                  <div>
                    <CardTitle className="text-gray-800 text-xl font-bold">–ú—É–¥—Ä–∞—è –°–æ–≤–∞</CardTitle>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  {/* –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ */}
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm" className="text-gray-500 hover:text-gray-700 hover:bg-white/50">
                        <Brain className="w-5 h-5 mr-1" />
                        <ChevronDown className="w-4 h-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-64">
                      <DropdownMenuRadioGroup value={selectedModel} onValueChange={setSelectedModel}>
                        <DropdownMenuRadioItem value="gemini-2.0-flash-streaming" className="flex items-center gap-3 p-3">
                          <span className="text-lg">‚ö°</span>
                          <span className="text-base">2.0 Flash Streaming</span>
                        </DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="gemini-2.5-flash" className="flex items-center gap-3 p-3">
                          <span className="text-lg">üß†</span>
                          <span className="text-base">2.5 Flash Standard</span>
                        </DropdownMenuRadioItem>
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>

                  {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                  <div className="flex items-center gap-1">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setIsToolSelectionOpen(true)}
                      className="text-gray-500 hover:text-gray-700 hover:bg-white/50"
                      title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
                    >
                      <Filter className="w-5 h-5" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setIsHistoryOpen(true)}
                      className="text-gray-500 hover:text-gray-700 hover:bg-white/50"
                      title="–ò—Å—Ç–æ—Ä–∏—è"
                    >
                      <HistoryIcon className="w-5 h-5" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleResetChat}
                      className="text-gray-500 hover:text-gray-700 hover:bg-white/50"
                      title="–°–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç"
                    >
                      <RotateCcw className="w-5 h-5" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleToggleChat}
                      className="text-gray-500 hover:text-gray-700 hover:bg-white/50"
                      title="–ó–∞–∫—Ä—ã—Ç—å"
                    >
                      <X className="w-5 h-5" />
                    </Button>
                  </div>
                </div>
              </div>
            </CardHeader>

            <CardContent className="p-0 flex flex-col h-[570px]">
              {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
              <ScrollArea className="flex-1 p-4">
                {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                {messages.length === 0 && !statusMessage && (
                  <div className="text-center mt-12 animate-fade-in">
                    <div className="relative mb-6">
                      <div className="w-20 h-20 mx-auto bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center shadow-lg">
                        <img src="/images/owl-svgrepo-com.svg" alt="–ú—É–¥—Ä–∞—è –°–æ–≤–∞" className="w-12 h-12" />
                      </div>
                      <div className="absolute inset-0 w-24 h-24 mx-auto rounded-full bg-gradient-to-r from-blue-400/20 to-purple-400/20 animate-pulse" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-800 mb-2">–ü—Ä–∏–≤–µ—Ç! –Ø –ú—É–¥—Ä–∞—è –°–æ–≤–∞ ü¶â</h3>
                    <p className="text-gray-600 mb-6 text-base">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</p>
                    <div className="flex flex-wrap gap-3 justify-center">
                      <Badge variant="secondary" className="bg-blue-100 text-blue-700 text-sm p-2">
                        üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏
                      </Badge>
                      <Badge variant="secondary" className="bg-green-100 text-green-700 text-sm p-2">
                        üë§ –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                      </Badge>
                      <Badge variant="secondary" className="bg-purple-100 text-purple-700 text-sm p-2">
                        üìÖ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                      </Badge>
                      <Badge variant="secondary" className="bg-orange-100 text-orange-700 text-sm p-2">
                        üéØ –£–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                      </Badge>
                    </div>
                  </div>
                )}

                {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
                {statusMessage && (
                  <div className="text-center mt-12">
                    <div className="inline-flex items-center gap-4 px-8 py-5 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl shadow-sm border border-blue-100">
                      <Loader2 className="w-7 h-7 animate-spin text-blue-500" />
                      <span className="text-blue-700 font-medium text-base">{statusMessage}</span>
                    </div>
                  </div>
                )}

                {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                {messages.map((message) => {
                  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                  if (message.apiCall && message.role === "assistant") {
                    return (
                      <div key={message.id} className="mb-6 flex justify-start w-full">
                        {/* ToolCallDisplay –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                      </div>
                    )
                  }

                  return (
                    <div
                      key={message.id}
                      className={`mb-4 flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`max-w-[85%] rounded-2xl p-4 shadow-sm transition-all duration-200 hover:shadow-md ${
                          message.role === "user"
                            ? "bg-gradient-to-br from-blue-500 to-blue-600 text-white"
                            : "bg-gradient-to-br from-gray-50 to-gray-100 text-gray-800 border border-gray-200"
                        }`}
                      >
                        <div className="flex items-center gap-2 mb-2">
                          {message.role === "user" ? (
                            <div className="w-5 h-5 bg-white/20 rounded-full flex items-center justify-center">
                              <User className="w-3 h-3" />
                            </div>
                          ) : (
                            <div className="w-5 h-5 bg-blue-100 rounded-full flex items-center justify-center">
                              <img src="/images/owl-svgrepo-com.svg" alt="AI" className="w-3 h-3" />
                            </div>
                          )}
                          <span className="text-sm opacity-70 font-medium">
                            {message.timestamp.toLocaleTimeString()}
                          </span>
                        </div>
                        <div className="whitespace-pre-wrap text-base leading-relaxed">{message.content}</div>
                      </div>
                    </div>
                  )
                })}

                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
                {isLoading && !messages.some((m) => m.apiCall) && (
                  <div className="flex justify-start mb-4">
                    <div className="bg-gradient-to-r from-gray-100 to-gray-200 rounded-2xl p-4 flex items-center gap-3 shadow-sm">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0ms" }} />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "150ms" }} />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "300ms" }} />
                      </div>
                      <span className="text-base text-gray-600 font-medium">–î—É–º–∞—é...</span>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </ScrollArea>

              {/* –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ */}
              <div className="p-4 border-t border-gray-100 bg-gradient-to-r from-gray-50/50 to-white/50">
                {/* –°–≤–æ–¥–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
                {toolSelectionSummary && (
                  <div className="mb-3 p-2 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="flex items-center gap-2 text-sm text-blue-700">
                      <Info className="w-4 h-4" />
                      <span className="font-medium">–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</span>
                      <span>{toolSelectionSummary}</span>
                    </div>
                  </div>
                )}

                {/* –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤ */}
                <div className="flex items-center gap-2 mb-3">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setAiMode(aiMode === "action" ? "question" : "action")}
                    className={`h-9 px-4 text-sm transition-all duration-200 rounded-md ${
                      aiMode === "action"
                        ? "bg-violet-100 text-violet-700 shadow-sm"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    }`}
                  >
                    <Zap className="w-4 h-4 mr-2" />
                    –î–µ–π—Å—Ç–≤–∏–µ
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowQuickCommands(!showQuickCommands)}
                    className={`h-9 px-4 text-sm transition-all duration-200 rounded-md ${
                      showQuickCommands
                        ? "bg-violet-100 text-violet-700 shadow-sm"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    }`}
                    title="–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"
                  >
                    <Command className="w-4 h-4 mr-2" />
                    –ö–æ–º–∞–Ω–¥—ã
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsToolSelectionOpen(true)}
                    className={`h-9 px-4 text-sm transition-all duration-200 rounded-md ${
                      toolSelectionMode === 'manual'
                        ? "bg-orange-100 text-orange-700 shadow-sm"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    }`}
                    title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
                  >
                    <Filter className="w-4 h-4 mr-2" />
                    {toolSelectionMode === 'auto' ? '–ê–≤—Ç–æ' : '–†—É—á–Ω–æ–π'}
                  </Button>
                </div>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <div className="flex gap-3">
                  <div className="flex-1 relative">
                    <TextareaAutosize
                      id="ai-chat-textarea"
                      value={inputValue}
                      onChange={(e) => {
                        setInputValue(e.target.value)
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                        if (toolSelectionMode === 'auto' && e.target.value.trim()) {
                          setLastQueryAnalysis(analyzeUserQuery(e.target.value))
                        }
                      }}
                      onKeyDown={handleKeyPress}
                      minRows={2}
                      maxRows={8}
                      placeholder={statusMessage || "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å..."}
                      disabled={isLoading || allTools.length === 0}
                      className="pr-12 py-3 rounded-xl border-gray-200 focus:border-blue-300 focus:ring-blue-200 bg-white/80 backdrop-blur-sm text-base w-full resize-none transition-all"
                    />
                    {inputValue && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setInputValue("")}
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    )}
                  </div>

                  <Button
                    onClick={isLoading ? stopCurrentAgent : handleSendMessage}
                    disabled={!isLoading && (!inputValue.trim() || allTools.length === 0)}
                    className={`px-4 py-3 rounded-xl transition-all duration-200 ${
                      isLoading
                        ? "bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 shadow-lg hover:shadow-xl"
                        : "bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-lg hover:shadow-xl hover:scale-105"
                    }`}
                  >
                    {isLoading ? <Pause className="w-5 h-5" /> : <Send className="w-5 h-5" />}
                  </Button>
                </div>

                {/* –°—Ç–∞—Ç—É—Å –±–∞—Ä */}
                <div className="flex items-center justify-between mt-2 text-sm text-gray-500">
                  <div className="flex items-center gap-2">
                    <span>–†–µ–∂–∏–º: {aiMode === "action" ? "‚ö° –î–µ–π—Å—Ç–≤–∏–µ" : "üîç –í–æ–ø—Ä–æ—Å"}</span>
                    <span>‚Ä¢</span>
                    <span>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {toolSelectionMode === 'auto' ? 'üéØ –ê–≤—Ç–æ' : '‚úã –†—É—á–Ω–æ–π'}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <div
                      className={`w-2 h-2 rounded-full ${
                        connectionStatus === "connected"
                          ? "bg-green-400"
                          : connectionStatus === "connecting"
                            ? "bg-yellow-400"
                            : "bg-red-400"
                      }`}
                    />
                    <span>{allTools.length} –¥–æ—Å—Ç—É–ø–Ω–æ</span>
                  </div>
                </div>
              </div>
            </CardContent>

            {/* –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
            <ToolSelectionDialog
              isOpen={isToolSelectionOpen}
              onClose={() => setIsToolSelectionOpen(false)}
              allTools={allTools}
              mode={toolSelectionMode}
              setMode={setToolSelectionMode}
              manualCategories={manualSelectedCategories}
              setManualCategories={setManualSelectedCategories}
              lastQueryAnalysis={lastQueryAnalysis}
            />

            {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–∏—Å—Ç–æ—Ä–∏—è –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            {/* ... */}
          </Card>
        </div>
      )}
    </div>
  )
}

