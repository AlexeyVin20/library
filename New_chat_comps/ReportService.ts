// ReportService.ts
// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

import { ReportDataBuilder, ChartData, TableData, MetricsData } from './ReportGenerator'
import { APIUtils, DataFormatter } from './AIAssistantUtils'

export interface StatisticsData {
  users?: any
  books?: any
  reservations?: any
  topBooks?: any[]
}

export class ReportService {
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  static async createUserReport(data: StatisticsData): Promise<string> {
    const builder = new ReportDataBuilder(
      '–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
      '–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    ).setPeriod('–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥')

    // –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.users) {
      const userMetrics: MetricsData = {
        metrics: [
          {
            label: '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            value: data.users.totalUsers || 0,
            icon: 'üë•',
            change: data.users.userGrowth ? {
              value: data.users.userGrowth,
              type: data.users.userGrowth > 0 ? 'increase' : 'decrease',
              period: '–º–µ—Å—è—Ü'
            } : undefined
          },
          {
            label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            value: data.users.activeUsers || 0,
            icon: '‚úÖ',
            change: data.users.activeGrowth ? {
              value: data.users.activeGrowth,
              type: data.users.activeGrowth > 0 ? 'increase' : 'decrease',
              period: '–º–µ—Å—è—Ü'
            } : undefined
          },
          {
            label: '–ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
            value: data.users.newRegistrations || 0,
            icon: 'üÜï'
          },
          {
            label: '–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            value: `${data.users.averageActivity || 0}%`,
            icon: 'üìä'
          }
        ]
      }

      builder.addMetricsSection(
        '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
        userMetrics,
        '–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'
      )
    }

    // –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    if (data.users?.dailyActivity) {
      const activityChart: ChartData = {
        type: 'line',
        data: data.users.dailyActivity,
        xAxis: 'date',
        yAxis: 'activity',
        title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º',
        colors: ['#8B4513', '#4682B4']
      }

      builder.addChartSection(
        '–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        activityChart,
        '–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥'
      )
    }

    // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.users?.topUsers) {
      const usersTable: TableData = {
        headers: ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ö–Ω–∏–≥ –≤–∑—è—Ç–æ', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç'],
        rows: data.users.topUsers.map((user: any) => [
          user.fullName || user.username,
          user.booksCount || 0,
          `${user.activityScore || 0}%`,
          DataFormatter.formatDate(user.lastVisit)
        ]),
        summary: {
          totalRows: data.users.topUsers.length,
          highlights: [`–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: ${data.users.topUsers[0]?.fullName || 'N/A'}`]
        }
      }

      builder.addTableSection(
        '–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        usersTable,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ'
      )
    }

    // –ò–Ω—Å–∞–π—Ç—ã
    const insights = this.generateUserInsights(data.users)
    if (insights.length > 0) {
      builder.addInsightsSection(
        '–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã',
        insights,
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö'
      )
    }

    return builder.generateHTML()
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–Ω–∏–≥–∞–º
  static async createBookReport(data: StatisticsData): Promise<string> {
    const builder = new ReportDataBuilder(
      '–û—Ç—á–µ—Ç –ø–æ –∫–Ω–∏–∂–Ω–æ–º—É —Ñ–æ–Ω–¥—É',
      '–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–Ω–∏–≥'
    ).setPeriod('–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥')

    // –ú–µ—Ç—Ä–∏–∫–∏ –∫–Ω–∏–≥
    if (data.books) {
      const bookMetrics: MetricsData = {
        metrics: [
          {
            label: '–í—Å–µ–≥–æ –∫–Ω–∏–≥',
            value: data.books.totalBooks || 0,
            icon: 'üìö'
          },
          {
            label: '–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–¥–∞—á–∏',
            value: data.books.availableBooks || 0,
            icon: '‚úÖ',
            change: data.books.availabilityChange ? {
              value: data.books.availabilityChange,
              type: data.books.availabilityChange > 0 ? 'increase' : 'decrease',
              period: '–Ω–µ–¥–µ–ª—è'
            } : undefined
          },
          {
            label: '–í—ã–¥–∞–Ω–æ —Å–µ–π—á–∞—Å',
            value: data.books.issuedBooks || 0,
            icon: 'üìñ'
          },
          {
            label: '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
            value: `${data.books.popularityIndex || 0}%`,
            icon: '‚≠ê'
          }
        ]
      }

      builder.addMetricsSection(
        '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ–Ω–¥–∞',
        bookMetrics,
        '–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–∏–∂–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'
      )
    }

    // –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∂–∞–Ω—Ä–∞–º
    if (data.books?.genreDistribution) {
      const genreChart: ChartData = {
        type: 'pie',
        data: data.books.genreDistribution,
        xAxis: 'genre',
        yAxis: 'count',
        title: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä–∞–º'
      }

      builder.addChartSection(
        '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∂–∞–Ω—Ä–∞–º',
        genreChart,
        '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–Ω–∏–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –≤ —Ñ–æ–Ω–¥–µ'
      )
    }

    // –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥
    if (data.topBooks && data.topBooks.length > 0) {
      const topBooksTable: TableData = {
        headers: ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ä', '–ñ–∞–Ω—Ä', '–í—ã–¥–∞—á', '–†–µ–π—Ç–∏–Ω–≥'],
        rows: data.topBooks.map((book: any) => [
          book.title,
          book.authors || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
          book.genre || '–ù–µ —É–∫–∞–∑–∞–Ω',
          book.issueCount || 0,
          `${book.rating || 0}/5`
        ]),
        summary: {
          totalRows: data.topBooks.length,
          highlights: [`–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è: "${data.topBooks[0]?.title || 'N/A'}"`]
        }
      }

      builder.addTableSection(
        '–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥',
        topBooksTable,
        '–ö–Ω–∏–≥–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—ã–¥–∞—á'
      )
    }

    // –ò–Ω—Å–∞–π—Ç—ã
    const insights = this.generateBookInsights(data.books, data.topBooks)
    if (insights.length > 0) {
      builder.addInsightsSection(
        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        insights,
        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–Ω–∏–∂–Ω—ã–º —Ñ–æ–Ω–¥–æ–º'
      )
    }

    return builder.generateHTML()
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è–º
  static async createReservationReport(data: StatisticsData): Promise<string> {
    const builder = new ReportDataBuilder(
      '–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è–º',
      '–ê–Ω–∞–ª–∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ –≤—ã–¥–∞—á –∫–Ω–∏–≥'
    ).setPeriod('–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥')

    // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π
    if (data.reservations) {
      const reservationMetrics: MetricsData = {
        metrics: [
          {
            label: '–í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π',
            value: data.reservations.totalReservations || 0,
            icon: 'üìÖ'
          },
          {
            label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö',
            value: data.reservations.activeReservations || 0,
            icon: 'üîÑ',
            change: data.reservations.activeChange ? {
              value: data.reservations.activeChange,
              type: data.reservations.activeChange > 0 ? 'increase' : 'decrease',
              period: '–¥–µ–Ω—å'
            } : undefined
          },
          {
            label: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö',
            value: data.reservations.overdueReservations || 0,
            icon: '‚ö†Ô∏è'
          },
          {
            label: '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            value: `${data.reservations.completionRate || 0}%`,
            icon: '‚úÖ'
          }
        ]
      }

      builder.addMetricsSection(
        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π',
        reservationMetrics,
        '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è–º –∫–Ω–∏–≥'
      )
    }

    // –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π
    if (data.reservations?.statusDistribution) {
      const statusChart: ChartData = {
        type: 'bar',
        data: data.reservations.statusDistribution,
        xAxis: 'status',
        yAxis: 'count',
        title: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
        colors: ['#28A745', '#FFC107', '#DC3545', '#17A2B8']
      }

      builder.addChartSection(
        '–°—Ç–∞—Ç—É—Å—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π',
        statusChart,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º'
      )
    }

    // –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –¥–Ω—è–º
    if (data.reservations?.dailyStats) {
      const dailyChart: ChartData = {
        type: 'line',
        data: data.reservations.dailyStats,
        xAxis: 'date',
        yAxis: 'count',
        title: '–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–Ω—è–º'
      }

      builder.addChartSection(
        '–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º',
        dailyChart,
        '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥'
      )
    }

    // –ò–Ω—Å–∞–π—Ç—ã
    const insights = this.generateReservationInsights(data.reservations)
    if (insights.length > 0) {
      builder.addInsightsSection(
        '–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        insights,
        '–í—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è–º'
      )
    }

    return builder.generateHTML()
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  static async createComprehensiveReport(data: StatisticsData): Promise<string> {
    const builder = new ReportDataBuilder(
      '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ WiseOwl',
      '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'
    ).setPeriod('–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥')

    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const overallMetrics: MetricsData = {
      metrics: [
        {
          label: '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          value: data.users?.totalUsers || 0,
          icon: 'üë•'
        },
        {
          label: '–ö–Ω–∏–≥ –≤ —Ñ–æ–Ω–¥–µ',
          value: data.books?.totalBooks || 0,
          icon: 'üìö'
        },
        {
          label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π',
          value: data.reservations?.activeReservations || 0,
          icon: 'üìÖ'
        },
        {
          label: '–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          value: `${this.calculateOverallActivity(data)}%`,
          icon: 'üìä'
        }
      ]
    }

    builder.addMetricsSection(
      '–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
      overallMetrics,
      '–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'
    )

    // –¢–æ–ø –∫–Ω–∏–≥–∏
    if (data.topBooks && data.topBooks.length > 0) {
      const topBooksChart: ChartData = {
        type: 'bar',
        data: data.topBooks.slice(0, 10).map(book => ({
          title: book.title.length > 20 ? book.title.substring(0, 20) + '...' : book.title,
          count: book.issueCount || 0
        })),
        xAxis: 'title',
        yAxis: 'count',
        title: '–¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥'
      }

      builder.addChartSection(
        '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏',
        topBooksChart,
        '–°–∞–º—ã–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ'
      )
    }

    // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    const insights = this.generateComprehensiveInsights(data)
    if (insights.length > 0) {
      builder.addInsightsSection(
        '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã',
        insights,
        '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'
      )
    }

    return builder.generateHTML()
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private static generateUserInsights(userData: any): string[] {
    const insights: string[] = []

    if (!userData) return insights

    if (userData.userGrowth > 10) {
      insights.push('–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (+' + userData.userGrowth + '%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–Ω–∏–∂–Ω—ã–π —Ñ–æ–Ω–¥.')
    }

    if (userData.activeUsers / userData.totalUsers < 0.3) {
      insights.push('–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ–Ω–µ–µ 30%). –°—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è.')
    }

    if (userData.newRegistrations > userData.totalUsers * 0.1) {
      insights.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–æ–≤.')
    }

    return insights
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –∫–Ω–∏–≥
  private static generateBookInsights(bookData: any, topBooks: any[]): string[] {
    const insights: string[] = []

    if (!bookData) return insights

    if (bookData.availableBooks / bookData.totalBooks < 0.7) {
      insights.push('–ù–∏–∑–∫–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–∏–≥ (–º–µ–Ω–µ–µ 70%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–∑–¥–∞–Ω–∏–π.')
    }

    if (topBooks && topBooks.length > 0) {
      const topGenres = this.getTopGenres(topBooks)
      if (topGenres.length > 0) {
        insights.push(`–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã: ${topGenres.join(', ')}. –°—Ç–æ–∏—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ–Ω–¥ –∫–Ω–∏–≥–∞–º–∏ —ç—Ç–∏—Ö –∂–∞–Ω—Ä–æ–≤.`)
      }
    }

    if (bookData.popularityIndex < 50) {
      insights.push('–û–±—â–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ñ–æ–Ω–¥–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —á–∏—Ç–∞—Ç–µ–ª–µ–π.')
    }

    return insights
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π
  private static generateReservationInsights(reservationData: any): string[] {
    const insights: string[] = []

    if (!reservationData) return insights

    if (reservationData.overdueReservations > reservationData.totalReservations * 0.1) {
      insights.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π (–±–æ–ª–µ–µ 10%). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
    }

    if (reservationData.completionRate < 80) {
      insights.push('–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π. –°—Ç–æ–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω.')
    }

    if (reservationData.activeChange > 20) {
      insights.push('–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
    }

    return insights
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
  private static generateComprehensiveInsights(data: StatisticsData): string[] {
    const insights: string[] = []

    const activity = this.calculateOverallActivity(data)
    
    if (activity > 80) {
      insights.push('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è.')
    } else if (activity > 60) {
      insights.push('–•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª–µ–π.')
    } else {
      insights.push('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    }

    // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–∏–≥
    if (data.users?.totalUsers && data.books?.totalBooks) {
      const ratio = data.books.totalBooks / data.users.totalUsers
      if (ratio < 10) {
        insights.push('–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–Ω–∏–≥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–¥–∞.')
      } else if (ratio > 50) {
        insights.push('–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–Ω–∏–≥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –∞–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π.')
      }
    }

    return insights
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private static calculateOverallActivity(data: StatisticsData): number {
    let score = 0
    let factors = 0

    if (data.users?.activeUsers && data.users?.totalUsers) {
      score += (data.users.activeUsers / data.users.totalUsers) * 100
      factors++
    }

    if (data.books?.issuedBooks && data.books?.totalBooks) {
      score += (data.books.issuedBooks / data.books.totalBooks) * 100
      factors++
    }

    if (data.reservations?.completionRate) {
      score += data.reservations.completionRate
      factors++
    }

    return factors > 0 ? Math.round(score / factors) : 0
  }

  private static getTopGenres(books: any[]): string[] {
    const genreCount: { [key: string]: number } = {}
    
    books.forEach(book => {
      if (book.genre) {
        genreCount[book.genre] = (genreCount[book.genre] || 0) + 1
      }
    })

    return Object.entries(genreCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([genre]) => genre)
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –ò–ò
  static async createReportFromAICommand(
    reportType: 'users' | 'books' | 'reservations' | 'comprehensive',
    statisticsData: StatisticsData
  ): Promise<string> {
    switch (reportType) {
      case 'users':
        return this.createUserReport(statisticsData)
      case 'books':
        return this.createBookReport(statisticsData)
      case 'reservations':
        return this.createReservationReport(statisticsData)
      case 'comprehensive':
        return this.createComprehensiveReport(statisticsData)
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: ${reportType}`)
    }
  }
}

